// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class RewardPaid extends ethereum.Event {
  get params(): RewardPaid__Params {
    return new RewardPaid__Params(this);
  }
}

export class RewardPaid__Params {
  _event: RewardPaid;

  constructor(event: RewardPaid) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get reward(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amountUnstake(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Staked extends ethereum.Event {
  get params(): Staked__Params {
    return new Staked__Params(this);
  }
}

export class Staked__Params {
  _event: Staked;

  constructor(event: Staked) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Stake__userResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class Stake extends ethereum.SmartContract {
  static bind(address: Address): Stake {
    return new Stake("Stake", address);
  }

  _calculateReward(
    amount: BigInt,
    currentReward: BigInt,
    totalStakedAmount: BigInt
  ): BigInt {
    let result = super.call(
      "_calculateReward",
      "_calculateReward(uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(currentReward),
        ethereum.Value.fromUnsignedBigInt(totalStakedAmount)
      ]
    );

    return result[0].toBigInt();
  }

  try__calculateReward(
    amount: BigInt,
    currentReward: BigInt,
    totalStakedAmount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_calculateReward",
      "_calculateReward(uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(currentReward),
        ethereum.Value.fromUnsignedBigInt(totalStakedAmount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _totalStakes(): BigInt {
    let result = super.call("_totalStakes", "_totalStakes():(uint256)", []);

    return result[0].toBigInt();
  }

  try__totalStakes(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("_totalStakes", "_totalStakes():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calculateUserReward(_user: Address): BigInt {
    let result = super.call(
      "calculateUserReward",
      "calculateUserReward(address):(uint256)",
      [ethereum.Value.fromAddress(_user)]
    );

    return result[0].toBigInt();
  }

  try_calculateUserReward(_user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calculateUserReward",
      "calculateUserReward(address):(uint256)",
      [ethereum.Value.fromAddress(_user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getBalance(): BigInt {
    let result = super.call("getBalance", "getBalance():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getBalance", "getBalance():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTime(sender: Address): BigInt {
    let result = super.call("getTime", "getTime(address):(uint256)", [
      ethereum.Value.fromAddress(sender)
    ]);

    return result[0].toBigInt();
  }

  try_getTime(sender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getTime", "getTime(address):(uint256)", [
      ethereum.Value.fromAddress(sender)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rewards(param0: Address): BigInt {
    let result = super.call("rewards", "rewards(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_rewards(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("rewards", "rewards(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalStakeAmount(): BigInt {
    let result = super.call(
      "totalStakeAmount",
      "totalStakeAmount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalStakeAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalStakeAmount",
      "totalStakeAmount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  UHC_TOKEN(): Address {
    let result = super.call("UHC_TOKEN", "UHC_TOKEN():(address)", []);

    return result[0].toAddress();
  }

  try_UHC_TOKEN(): ethereum.CallResult<Address> {
    let result = super.tryCall("UHC_TOKEN", "UHC_TOKEN():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  user(param0: Address, param1: BigInt): Stake__userResult {
    let result = super.call(
      "user",
      "user(address,uint256):(uint256,uint256,uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return new Stake__userResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_user(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<Stake__userResult> {
    let result = super.tryCall(
      "user",
      "user(address,uint256):(uint256,uint256,uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Stake__userResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  userInitialAmount(currentReward: BigInt): BigInt {
    let result = super.call(
      "userInitialAmount",
      "userInitialAmount(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(currentReward)]
    );

    return result[0].toBigInt();
  }

  try_userInitialAmount(currentReward: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "userInitialAmount",
      "userInitialAmount(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(currentReward)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class StakeCall extends ethereum.Call {
  get inputs(): StakeCall__Inputs {
    return new StakeCall__Inputs(this);
  }

  get outputs(): StakeCall__Outputs {
    return new StakeCall__Outputs(this);
  }
}

export class StakeCall__Inputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class StakeCall__Outputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }
}

export class UnStakeCall extends ethereum.Call {
  get inputs(): UnStakeCall__Inputs {
    return new UnStakeCall__Inputs(this);
  }

  get outputs(): UnStakeCall__Outputs {
    return new UnStakeCall__Outputs(this);
  }
}

export class UnStakeCall__Inputs {
  _call: UnStakeCall;

  constructor(call: UnStakeCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UnStakeCall__Outputs {
  _call: UnStakeCall;

  constructor(call: UnStakeCall) {
    this._call = call;
  }
}
