// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class AuthorizationUsed extends ethereum.Event {
  get params(): AuthorizationUsed__Params {
    return new AuthorizationUsed__Params(this);
  }
}

export class AuthorizationUsed__Params {
  _event: AuthorizationUsed;

  constructor(event: AuthorizationUsed) {
    this._event = event;
  }

  get authorizer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get nonce(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }
}

export class LiquidityAdded extends ethereum.Event {
  get params(): LiquidityAdded__Params {
    return new LiquidityAdded__Params(this);
  }
}

export class LiquidityAdded__Params {
  _event: LiquidityAdded;

  constructor(event: LiquidityAdded) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get pair(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get owner(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amountALT(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get amountUSDH(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get liquidity(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class LiquidityRemoved extends ethereum.Event {
  get params(): LiquidityRemoved__Params {
    return new LiquidityRemoved__Params(this);
  }
}

export class LiquidityRemoved__Params {
  _event: LiquidityRemoved;

  constructor(event: LiquidityRemoved) {
    this._event = event;
  }

  get pair(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amountALT(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amountUSDHBurn(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get liquidity(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get UserPoolPercent(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PoolCreated extends ethereum.Event {
  get params(): PoolCreated__Params {
    return new PoolCreated__Params(this);
  }
}

export class PoolCreated__Params {
  _event: PoolCreated;

  constructor(event: PoolCreated) {
    this._event = event;
  }

  get pair(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get initialRatio(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Swap extends ethereum.Event {
  get params(): Swap__Params {
    return new Swap__Params(this);
  }
}

export class Swap__Params {
  _event: Swap;

  constructor(event: Swap) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amountIn(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amountOut(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get pair(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get amountInAddress(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get amountOutAddress(): Address {
    return this._event.parameters[5].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Contract__addLiquidityResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    return map;
  }
}

export class Contract__removeLiquidityResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class Contract__getDetailsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class Contract__getDetails1Result {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class Contract__getUserResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class Contract__getUsersResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class Contract__userResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class Contract extends ethereum.SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  addLiquidity(
    _amountALT: BigInt,
    _owner: Address
  ): Contract__addLiquidityResult {
    let result = super.call(
      "addLiquidity",
      "addLiquidity(uint256,address):(uint256,uint256,uint256,uint256,uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_amountALT),
        ethereum.Value.fromAddress(_owner)
      ]
    );

    return new Contract__addLiquidityResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt()
    );
  }

  try_addLiquidity(
    _amountALT: BigInt,
    _owner: Address
  ): ethereum.CallResult<Contract__addLiquidityResult> {
    let result = super.tryCall(
      "addLiquidity",
      "addLiquidity(uint256,address):(uint256,uint256,uint256,uint256,uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_amountALT),
        ethereum.Value.fromAddress(_owner)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__addLiquidityResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt()
      )
    );
  }

  approve(spender: Address, value: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(value)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, value: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(value)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  burn(value: BigInt): boolean {
    let result = super.call("burn", "burn(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(value)
    ]);

    return result[0].toBoolean();
  }

  try_burn(value: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("burn", "burn(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(value)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  createPool(token: Address, ratio: BigInt): Address {
    let result = super.call(
      "createPool",
      "createPool(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromUnsignedBigInt(ratio)
      ]
    );

    return result[0].toAddress();
  }

  try_createPool(token: Address, ratio: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "createPool",
      "createPool(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromUnsignedBigInt(ratio)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  mint(to: Address, value: BigInt): boolean {
    let result = super.call("mint", "mint(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(value)
    ]);

    return result[0].toBoolean();
  }

  try_mint(to: Address, value: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("mint", "mint(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(value)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  removeLiquidity(_maker: Address): Contract__removeLiquidityResult {
    let result = super.call(
      "removeLiquidity",
      "removeLiquidity(address):(uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(_maker)]
    );

    return new Contract__removeLiquidityResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_removeLiquidity(
    _maker: Address
  ): ethereum.CallResult<Contract__removeLiquidityResult> {
    let result = super.tryCall(
      "removeLiquidity",
      "removeLiquidity(address):(uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(_maker)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__removeLiquidityResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  swap(
    token: Address,
    amountIn: BigInt,
    amountOutMin: BigInt,
    amountInAddress: Address,
    amountOutAddress: Address
  ): BigInt {
    let result = super.call(
      "swap",
      "swap(address,uint256,uint256,address,address):(uint256)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromUnsignedBigInt(amountIn),
        ethereum.Value.fromUnsignedBigInt(amountOutMin),
        ethereum.Value.fromAddress(amountInAddress),
        ethereum.Value.fromAddress(amountOutAddress)
      ]
    );

    return result[0].toBigInt();
  }

  try_swap(
    token: Address,
    amountIn: BigInt,
    amountOutMin: BigInt,
    amountInAddress: Address,
    amountOutAddress: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "swap",
      "swap(address,uint256,uint256,address,address):(uint256)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromUnsignedBigInt(amountIn),
        ethereum.Value.fromUnsignedBigInt(amountOutMin),
        ethereum.Value.fromAddress(amountInAddress),
        ethereum.Value.fromAddress(amountOutAddress)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  swapTokens(
    _user: Address,
    _amountIn: BigInt,
    _amountOutMin: BigInt,
    _amountInAddress: Address,
    _amountOutAddress: Address
  ): BigInt {
    let result = super.call(
      "swapTokens",
      "swapTokens(address,uint256,uint256,address,address):(uint256)",
      [
        ethereum.Value.fromAddress(_user),
        ethereum.Value.fromUnsignedBigInt(_amountIn),
        ethereum.Value.fromUnsignedBigInt(_amountOutMin),
        ethereum.Value.fromAddress(_amountInAddress),
        ethereum.Value.fromAddress(_amountOutAddress)
      ]
    );

    return result[0].toBigInt();
  }

  try_swapTokens(
    _user: Address,
    _amountIn: BigInt,
    _amountOutMin: BigInt,
    _amountInAddress: Address,
    _amountOutAddress: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "swapTokens",
      "swapTokens(address,uint256,uint256,address,address):(uint256)",
      [
        ethereum.Value.fromAddress(_user),
        ethereum.Value.fromUnsignedBigInt(_amountIn),
        ethereum.Value.fromUnsignedBigInt(_amountOutMin),
        ethereum.Value.fromAddress(_amountInAddress),
        ethereum.Value.fromAddress(_amountOutAddress)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(to: Address, value: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(value)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(to: Address, value: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(value)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(from: Address, to: Address, value: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(value)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    from: Address,
    to: Address,
    value: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(value)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  allowance(param0: Address, param1: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return result[0].toBigInt();
  }

  try_allowance(param0: Address, param1: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  authorizationState(param0: Address, param1: Bytes): boolean {
    let result = super.call(
      "authorizationState",
      "authorizationState(address,bytes32):(bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromFixedBytes(param1)
      ]
    );

    return result[0].toBoolean();
  }

  try_authorizationState(
    param0: Address,
    param1: Bytes
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "authorizationState",
      "authorizationState(address,bytes32):(bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromFixedBytes(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(param0: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  factory(): Address {
    let result = super.call("factory", "factory():(address)", []);

    return result[0].toAddress();
  }

  try_factory(): ethereum.CallResult<Address> {
    let result = super.tryCall("factory", "factory():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getChainId(): BigInt {
    let result = super.call("getChainId", "getChainId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getChainId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getChainId", "getChainId():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getDetails(_poolAddress: Address): Contract__getDetailsResult {
    let result = super.call(
      "getDetails",
      "getDetails(address):(uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(_poolAddress)]
    );

    return new Contract__getDetailsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_getDetails(
    _poolAddress: Address
  ): ethereum.CallResult<Contract__getDetailsResult> {
    let result = super.tryCall(
      "getDetails",
      "getDetails(address):(uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(_poolAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__getDetailsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  getDetails1(): Contract__getDetails1Result {
    let result = super.call(
      "getDetails",
      "getDetails():(uint256,uint256,uint256)",
      []
    );

    return new Contract__getDetails1Result(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_getDetails1(): ethereum.CallResult<Contract__getDetails1Result> {
    let result = super.tryCall(
      "getDetails",
      "getDetails():(uint256,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__getDetails1Result(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  getDomainSeparator(): Bytes {
    let result = super.call(
      "getDomainSeparator",
      "getDomainSeparator():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_getDomainSeparator(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getDomainSeparator",
      "getDomainSeparator():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getLPCalc(_poolAddress: Address, to: Address, liquidity: BigInt): BigInt {
    let result = super.call(
      "getLPCalc",
      "getLPCalc(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_poolAddress),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(liquidity)
      ]
    );

    return result[0].toBigInt();
  }

  try_getLPCalc(
    _poolAddress: Address,
    to: Address,
    liquidity: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getLPCalc",
      "getLPCalc(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_poolAddress),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(liquidity)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getLPCalc1(to: Address, liquidity: BigInt): BigInt {
    let result = super.call(
      "getLPCalc",
      "getLPCalc(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(liquidity)
      ]
    );

    return result[0].toBigInt();
  }

  try_getLPCalc1(to: Address, liquidity: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getLPCalc",
      "getLPCalc(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(liquidity)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUser(_user: Address): Contract__getUserResult {
    let result = super.call("getUser", "getUser(address):(uint256,uint256)", [
      ethereum.Value.fromAddress(_user)
    ]);

    return new Contract__getUserResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getUser(_user: Address): ethereum.CallResult<Contract__getUserResult> {
    let result = super.tryCall(
      "getUser",
      "getUser(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(_user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__getUserResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  getUsers(_poolAddress: Address, _user: Address): Contract__getUsersResult {
    let result = super.call(
      "getUsers",
      "getUsers(address,address):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(_poolAddress),
        ethereum.Value.fromAddress(_user)
      ]
    );

    return new Contract__getUsersResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getUsers(
    _poolAddress: Address,
    _user: Address
  ): ethereum.CallResult<Contract__getUsersResult> {
    let result = super.tryCall(
      "getUsers",
      "getUsers(address,address):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(_poolAddress),
        ethereum.Value.fromAddress(_user)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__getUsersResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  initialRatio(): BigInt {
    let result = super.call("initialRatio", "initialRatio():(uint256)", []);

    return result[0].toBigInt();
  }

  try_initialRatio(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("initialRatio", "initialRatio():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MINIMUM_LIQUIDITY(): BigInt {
    let result = super.call(
      "MINIMUM_LIQUIDITY",
      "MINIMUM_LIQUIDITY():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MINIMUM_LIQUIDITY(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MINIMUM_LIQUIDITY",
      "MINIMUM_LIQUIDITY():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  nonces(param0: Address): BigInt {
    let result = super.call("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_nonces(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  PERMIT_TYPEHASH(): Bytes {
    let result = super.call(
      "PERMIT_TYPEHASH",
      "PERMIT_TYPEHASH():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_PERMIT_TYPEHASH(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "PERMIT_TYPEHASH",
      "PERMIT_TYPEHASH():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  pools(param0: Address): Address {
    let result = super.call("pools", "pools(address):(address)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toAddress();
  }

  try_pools(param0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall("pools", "pools(address):(address)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  quote(_amountA: BigInt, _reserveA: BigInt, _reserveB: BigInt): BigInt {
    let result = super.call(
      "quote",
      "quote(uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_amountA),
        ethereum.Value.fromUnsignedBigInt(_reserveA),
        ethereum.Value.fromUnsignedBigInt(_reserveB)
      ]
    );

    return result[0].toBigInt();
  }

  try_quote(
    _amountA: BigInt,
    _reserveA: BigInt,
    _reserveB: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "quote",
      "quote(uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_amountA),
        ethereum.Value.fromUnsignedBigInt(_reserveA),
        ethereum.Value.fromUnsignedBigInt(_reserveB)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  quoteSwap(_amountA: BigInt, _reserveA: BigInt, _reserveB: BigInt): BigInt {
    let result = super.call(
      "quoteSwap",
      "quoteSwap(uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_amountA),
        ethereum.Value.fromUnsignedBigInt(_reserveA),
        ethereum.Value.fromUnsignedBigInt(_reserveB)
      ]
    );

    return result[0].toBigInt();
  }

  try_quoteSwap(
    _amountA: BigInt,
    _reserveA: BigInt,
    _reserveB: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "quoteSwap",
      "quoteSwap(uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_amountA),
        ethereum.Value.fromUnsignedBigInt(_reserveA),
        ethereum.Value.fromUnsignedBigInt(_reserveB)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  reserveAltAmount(): BigInt {
    let result = super.call(
      "reserveAltAmount",
      "reserveAltAmount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_reserveAltAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "reserveAltAmount",
      "reserveAltAmount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  reserveUSDHAmount(): BigInt {
    let result = super.call(
      "reserveUSDHAmount",
      "reserveUSDHAmount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_reserveUSDHAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "reserveUSDHAmount",
      "reserveUSDHAmount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  STAKING_CONTRACT(): Address {
    let result = super.call(
      "STAKING_CONTRACT",
      "STAKING_CONTRACT():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_STAKING_CONTRACT(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "STAKING_CONTRACT",
      "STAKING_CONTRACT():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  token(): Address {
    let result = super.call("token", "token():(address)", []);

    return result[0].toAddress();
  }

  try_token(): ethereum.CallResult<Address> {
    let result = super.tryCall("token", "token():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  TRANSFER_WITH_AUTHORIZATION_TYPEHASH(): Bytes {
    let result = super.call(
      "TRANSFER_WITH_AUTHORIZATION_TYPEHASH",
      "TRANSFER_WITH_AUTHORIZATION_TYPEHASH():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_TRANSFER_WITH_AUTHORIZATION_TYPEHASH(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "TRANSFER_WITH_AUTHORIZATION_TYPEHASH",
      "TRANSFER_WITH_AUTHORIZATION_TYPEHASH():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  USDH__TOKEN(): Address {
    let result = super.call("USDH__TOKEN", "USDH__TOKEN():(address)", []);

    return result[0].toAddress();
  }

  try_USDH__TOKEN(): ethereum.CallResult<Address> {
    let result = super.tryCall("USDH__TOKEN", "USDH__TOKEN():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  USDH_TOKEN(): Address {
    let result = super.call("USDH_TOKEN", "USDH_TOKEN():(address)", []);

    return result[0].toAddress();
  }

  try_USDH_TOKEN(): ethereum.CallResult<Address> {
    let result = super.tryCall("USDH_TOKEN", "USDH_TOKEN():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  user(param0: Address): Contract__userResult {
    let result = super.call("user", "user(address):(uint256,uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return new Contract__userResult(result[0].toBigInt(), result[1].toBigInt());
  }

  try_user(param0: Address): ethereum.CallResult<Contract__userResult> {
    let result = super.tryCall("user", "user(address):(uint256,uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__userResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }
}

export class AddLiquidityCall extends ethereum.Call {
  get inputs(): AddLiquidityCall__Inputs {
    return new AddLiquidityCall__Inputs(this);
  }

  get outputs(): AddLiquidityCall__Outputs {
    return new AddLiquidityCall__Outputs(this);
  }
}

export class AddLiquidityCall__Inputs {
  _call: AddLiquidityCall;

  constructor(call: AddLiquidityCall) {
    this._call = call;
  }

  get _amountALT(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _owner(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class AddLiquidityCall__Outputs {
  _call: AddLiquidityCall;

  constructor(call: AddLiquidityCall) {
    this._call = call;
  }

  get amountUSDH(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get amountAlt(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get liquidity(): BigInt {
    return this._call.outputValues[2].value.toBigInt();
  }

  get userLiquidityReward(): BigInt {
    return this._call.outputValues[3].value.toBigInt();
  }

  get stakeAmount(): BigInt {
    return this._call.outputValues[4].value.toBigInt();
  }

  get amountUSDHTotal(): BigInt {
    return this._call.outputValues[5].value.toBigInt();
  }
}

export class AddLiquidityInPoolCall extends ethereum.Call {
  get inputs(): AddLiquidityInPoolCall__Inputs {
    return new AddLiquidityInPoolCall__Inputs(this);
  }

  get outputs(): AddLiquidityInPoolCall__Outputs {
    return new AddLiquidityInPoolCall__Outputs(this);
  }
}

export class AddLiquidityInPoolCall__Inputs {
  _call: AddLiquidityInPoolCall;

  constructor(call: AddLiquidityInPoolCall) {
    this._call = call;
  }

  get amountALT(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _token(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class AddLiquidityInPoolCall__Outputs {
  _call: AddLiquidityInPoolCall;

  constructor(call: AddLiquidityInPoolCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get value(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class CreatePoolCall extends ethereum.Call {
  get inputs(): CreatePoolCall__Inputs {
    return new CreatePoolCall__Inputs(this);
  }

  get outputs(): CreatePoolCall__Outputs {
    return new CreatePoolCall__Outputs(this);
  }
}

export class CreatePoolCall__Inputs {
  _call: CreatePoolCall;

  constructor(call: CreatePoolCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get ratio(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class CreatePoolCall__Outputs {
  _call: CreatePoolCall;

  constructor(call: CreatePoolCall) {
    this._call = call;
  }

  get pair(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class PermitCall extends ethereum.Call {
  get inputs(): PermitCall__Inputs {
    return new PermitCall__Inputs(this);
  }

  get outputs(): PermitCall__Outputs {
    return new PermitCall__Outputs(this);
  }
}

export class PermitCall__Inputs {
  _call: PermitCall;

  constructor(call: PermitCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get spender(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }
}

export class PermitCall__Outputs {
  _call: PermitCall;

  constructor(call: PermitCall) {
    this._call = call;
  }
}

export class RemoveLiquidityCall extends ethereum.Call {
  get inputs(): RemoveLiquidityCall__Inputs {
    return new RemoveLiquidityCall__Inputs(this);
  }

  get outputs(): RemoveLiquidityCall__Outputs {
    return new RemoveLiquidityCall__Outputs(this);
  }
}

export class RemoveLiquidityCall__Inputs {
  _call: RemoveLiquidityCall;

  constructor(call: RemoveLiquidityCall) {
    this._call = call;
  }

  get _maker(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveLiquidityCall__Outputs {
  _call: RemoveLiquidityCall;

  constructor(call: RemoveLiquidityCall) {
    this._call = call;
  }

  get amountUSDHUserBurn(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get amountALT(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get UserPoolPercent(): BigInt {
    return this._call.outputValues[2].value.toBigInt();
  }
}

export class RemoveLiquidityInPoolCall extends ethereum.Call {
  get inputs(): RemoveLiquidityInPoolCall__Inputs {
    return new RemoveLiquidityInPoolCall__Inputs(this);
  }

  get outputs(): RemoveLiquidityInPoolCall__Outputs {
    return new RemoveLiquidityInPoolCall__Outputs(this);
  }
}

export class RemoveLiquidityInPoolCall__Inputs {
  _call: RemoveLiquidityInPoolCall;

  constructor(call: RemoveLiquidityInPoolCall) {
    this._call = call;
  }

  get liquidity(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get token(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RemoveLiquidityInPoolCall__Outputs {
  _call: RemoveLiquidityInPoolCall;

  constructor(call: RemoveLiquidityInPoolCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetRatioCall extends ethereum.Call {
  get inputs(): SetRatioCall__Inputs {
    return new SetRatioCall__Inputs(this);
  }

  get outputs(): SetRatioCall__Outputs {
    return new SetRatioCall__Outputs(this);
  }
}

export class SetRatioCall__Inputs {
  _call: SetRatioCall;

  constructor(call: SetRatioCall) {
    this._call = call;
  }

  get _ratio(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetRatioCall__Outputs {
  _call: SetRatioCall;

  constructor(call: SetRatioCall) {
    this._call = call;
  }
}

export class SwapCall extends ethereum.Call {
  get inputs(): SwapCall__Inputs {
    return new SwapCall__Inputs(this);
  }

  get outputs(): SwapCall__Outputs {
    return new SwapCall__Outputs(this);
  }
}

export class SwapCall__Inputs {
  _call: SwapCall;

  constructor(call: SwapCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amountIn(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get amountOutMin(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get amountInAddress(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get amountOutAddress(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class SwapCall__Outputs {
  _call: SwapCall;

  constructor(call: SwapCall) {
    this._call = call;
  }

  get result(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SwapTokensCall extends ethereum.Call {
  get inputs(): SwapTokensCall__Inputs {
    return new SwapTokensCall__Inputs(this);
  }

  get outputs(): SwapTokensCall__Outputs {
    return new SwapTokensCall__Outputs(this);
  }
}

export class SwapTokensCall__Inputs {
  _call: SwapTokensCall;

  constructor(call: SwapTokensCall) {
    this._call = call;
  }

  get _user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amountIn(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _amountOutMin(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _amountInAddress(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _amountOutAddress(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class SwapTokensCall__Outputs {
  _call: SwapTokensCall;

  constructor(call: SwapTokensCall) {
    this._call = call;
  }

  get result(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class TransferWithAuthorizationCall extends ethereum.Call {
  get inputs(): TransferWithAuthorizationCall__Inputs {
    return new TransferWithAuthorizationCall__Inputs(this);
  }

  get outputs(): TransferWithAuthorizationCall__Outputs {
    return new TransferWithAuthorizationCall__Outputs(this);
  }
}

export class TransferWithAuthorizationCall__Inputs {
  _call: TransferWithAuthorizationCall;

  constructor(call: TransferWithAuthorizationCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get validAfter(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get validBefore(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get nonce(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }

  get v(): i32 {
    return this._call.inputValues[6].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[7].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[8].value.toBytes();
  }
}

export class TransferWithAuthorizationCall__Outputs {
  _call: TransferWithAuthorizationCall;

  constructor(call: TransferWithAuthorizationCall) {
    this._call = call;
  }
}
