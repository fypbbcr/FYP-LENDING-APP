[{"/home/danial/Desktop/XORD_Scripts/Wallet-Connector/FYP_Project/src/index.js":"1","/home/danial/Desktop/XORD_Scripts/Wallet-Connector/FYP_Project/src/App.js":"2","/home/danial/Desktop/XORD_Scripts/Wallet-Connector/FYP_Project/src/reportWebVitals.js":"3","/home/danial/Desktop/XORD_Scripts/Wallet-Connector/FYP_Project/src/Home.js":"4","/home/danial/Desktop/XORD_Scripts/Wallet-Connector/FYP_Project/src/Connectors.js":"5","/home/danial/Desktop/XORD_Scripts/Wallet-Connector/FYP_Project/src/utils/functions.js":"6","/home/danial/Desktop/XORD_Scripts/Wallet-Connector/FYP_Project/src/utils/constants.js":"7"},{"size":500,"mtime":1613049589150,"results":"8","hashOfConfig":"9"},{"size":580,"mtime":1613202593967,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1613049589150,"results":"11","hashOfConfig":"9"},{"size":3428,"mtime":1622704658875,"results":"12","hashOfConfig":"9"},{"size":479,"mtime":1616829793394,"results":"13","hashOfConfig":"9"},{"size":11619,"mtime":1622704609221,"results":"14","hashOfConfig":"9"},{"size":9633,"mtime":1622704477416,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1vxibrq",{"filePath":"19","messages":"20","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"18"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"/home/danial/Desktop/XORD_Scripts/Wallet-Connector/FYP_Project/src/index.js",[],["33","34"],"/home/danial/Desktop/XORD_Scripts/Wallet-Connector/FYP_Project/src/App.js",["35","36"],"import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Home from \"./Home.js\";\nimport Web3 from \"web3\";\n// import Web3Provider from \"web3-react\";\nimport { Web3ReactProvider } from \"@web3-react/core\";\nimport { Web3Provider } from \"@ethersproject/providers\";\n\nfunction getLibrary(provider) {\n  const library = new Web3Provider(provider);\n  library.pollingInterval = 8000;\n  return library;\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Web3ReactProvider getLibrary={getLibrary}>\n        <Home />\n      </Web3ReactProvider>\n    </div>\n  );\n}\n\nexport default App;\n","/home/danial/Desktop/XORD_Scripts/Wallet-Connector/FYP_Project/src/reportWebVitals.js",[],"/home/danial/Desktop/XORD_Scripts/Wallet-Connector/FYP_Project/src/Home.js",["37","38","39","40","41","42","43","44","45"],"/home/danial/Desktop/XORD_Scripts/Wallet-Connector/FYP_Project/src/Connectors.js",[],"/home/danial/Desktop/XORD_Scripts/Wallet-Connector/FYP_Project/src/utils/functions.js",["46","47"],"var Web3 = require('web3')\nlet axios = require('axios')\nconst BigNumber = require('bignumber.js');\nlet constants = require('./constants');\n\n\nlet web3 = new Web3(window.ethereum);\n\nlet contract=new web3.eth.Contract(constants.abi,constants.contract_address);\nlet erc20Contract=new web3.eth.Contract(constants.erc20abi,constants.erc20Address);\n\n\nexports.registerBorrower = async (accounts) => {\n    await contract.methods.registerAsBorrower().send({from: accounts , value: web3.utils.toWei('0.02', 'ether') /*** selected account from metamask ***/}) // contract.methods.methodName(parameters).send({from:selected account})\n    .on('transactionHash', (hash) => {\n        // hash of tx\n    }).on('confirmation', function (confirmationNumber, receipt) {\n        if (confirmationNumber === 2) {\n           // tx confirmed\n        }\n    })\n  \n};\n\nexports.removeBorrower = async (accounts) => {\n  await contract.methods.removedAsBorrower().send({from: accounts/*** selected account from metamask ***/}) // contract.methods.methodName(parameters).send({from:selected account})\n  .on('transactionHash', (hash) => {\n      // hash of tx\n  }).on('confirmation', function (confirmationNumber, receipt) {\n      if (confirmationNumber === 2) {\n         // tx confirmed\n      }\n  })\n\n};\n\nexports.giveApproval = async (accounts) => {\n  await erc20Contract.methods.approve(constants.contract_address,web3.utils.toWei('100000000')).send({from: accounts/*** selected account from metamask ***/}) // contract.methods.methodName(parameters).send({from:selected account})\n  .on('transactionHash', (hash) => {\n      // hash of tx\n  }).on('confirmation', function (confirmationNumber, receipt) {\n      if (confirmationNumber === 2) {\n         // tx confirmed\n      }\n  })\n}\n\n\nexports.addRequest = async (amount,duration,accounts) => {\n  duration = duration * 60\n  await contract.methods.requestFundsToBorrow(web3.utils.toWei(amount.toString()),duration).send({from: accounts /*** selected account from metamask ***/}) // contract.methods.methodName(parameters).send({from:selected account})\n  .on('transactionHash', (hash) => {\n      // hash of tx\n  }).on('confirmation', function (confirmationNumber, receipt) {\n      if (confirmationNumber === 2) {\n         // tx confirmed\n      }\n  })\n\n};\n\n\nexports.acceptRequest = async (accounts,id) => {\n\n  await contract.methods.AcceptRequest(id).send({from: accounts /*** selected account from metamask ***/}) // contract.methods.methodName(parameters).send({from:selected account})\n  .on('transactionHash', (hash) => {\n      // hash of tx\n  }).on('confirmation', function (confirmationNumber, receipt) {\n      if (confirmationNumber === 2) {\n         // tx confirmed\n      }\n  })\n\n};\n\n\nexports.ReportBorrower = async (accounts,id) => {\n\n  await contract.methods.ReportBorrower(id).send({from: accounts /*** selected account from metamask ***/}) // contract.methods.methodName(parameters).send({from:selected account})\n  .on('transactionHash', (hash) => {\n      // hash of tx\n  }).on('confirmation', function (confirmationNumber, receipt) {\n      if (confirmationNumber === 2) {\n         // tx confirmed\n      }\n  })\n\n};\n\n\nexports.payBackLoan = async (accounts,id) => {\n\n  await contract.methods.payBackLender(id).send({from: accounts /*** selected account from metamask ***/}) // contract.methods.methodName(parameters).send({from:selected account})\n  .on('transactionHash', (hash) => {\n      // hash of tx\n  }).on('confirmation', function (confirmationNumber, receipt) {\n      if (confirmationNumber === 2) {\n         // tx confirmed\n      }\n  })\n\n};\n\n\n// exports.acceptNegotiatedOffer = async(fromAccount,counter_Id) =>{\n//   const transactionParameters = {\n//     nonce: '0x00', // ignored by MetaMask\n//     gasPrice: '0x09184e72a000', // customizable by user during MetaMask confirmation.\n//     gas: '0x2710', // customizable by user during MetaMask confirmation.\n//     to: constants.contract_address, // Required except during contract publications.\n//     from: fromAccount, // must match user's active address.\n//     value: '0x00', // Only required to send ether to the recipient from the initiating external account.\n//     data:contract.methods.acceptCounterOrder(counter_Id).encodeABI(), // Optional, but used for defining smart contract creation and interaction.\n//     chainId: 4, // Used to prevent transaction reuse across blockchains. Auto-filled by MetaMask.\n//   };\n\n//   const txHash = await window.ethereum.request({\n//     method: 'eth_sendTransaction',\n//     params: [transactionParameters],\n//   });\n// }\n\n// exports.rejectNegotiatedOffer = async(fromAccount,counter_Id) =>{\n//   const transactionParameters = {\n//     nonce: '0x00', // ignored by MetaMask\n//     gasPrice: '0x09184e72a000', // customizable by user during MetaMask confirmation.\n//     gas: '0x2710', // customizable by user during MetaMask confirmation.\n//     to: constants.contract_address, // Required except during contract publications.\n//     from: fromAccount, // must match user's active address.\n//     value: '0x00', // Only required to send ether to the recipient from the initiating external account.\n//     data:contract.methods.cancelCounterOrder(counter_Id).encodeABI(), // Optional, but used for defining smart contract creation and interaction.\n//     chainId: 4, // Used to prevent transaction reuse across blockchains. Auto-filled by MetaMask.\n//   };\n\n//   const txHash = await window.ethereum.request({\n//     method: 'eth_sendTransaction',\n//     params: [transactionParameters],\n//   });\n// }\n\n// exports.buyOrder = async(fromAccount, sell_Id)=>{\n//   let price = await contract.methods.SellOrders(sell_Id).call();\n//   price=new BigNumber(price)\n//   const transactionParameters = {\n//     nonce: '0x00', // ignored by MetaMask\n//     gasPrice: '0x09184e72a000', // customizable by user during MetaMask confirmation.\n//     gas: '0x2710', // customizable by user during MetaMask confirmation.\n//     to: constants.contract_address, // Required except during contract publications.\n//     from: fromAccount, // must match user's active address.\n//     value: price, // Only required to send ether to the recipient from the initiating external account.\n//     data:contract.methods.buySellOrder(sell_Id).encodeABI(), // Optional, but used for defining smart contract creation and interaction.\n//     chainId: 4, // Used to prevent transaction reuse across blockchains. Auto-filled by MetaMask.\n//   };\n\n//   const txHash = await window.ethereum.request({\n//     method: 'eth_sendTransaction',\n//     params: [transactionParameters],\n//   });\n// }\n\n// exports.negotiateOrder = async(fromAccount, sell_Id , price , comment)=>{\n//   if(comment==null){\n//     comment=\"\"\n//   }\n//   const transactionParameters = {\n//     nonce: '0x00', // ignored by MetaMask\n//     gasPrice: '0x09184e72a000', // customizable by user during MetaMask confirmation.\n//     gas: '0x2710', // customizable by user during MetaMask confirmation.\n//     to: constants.contract_address, // Required except during contract publications.\n//     from: fromAccount, // must match user's active address.\n//     value: '0x00', // Only required to send ether to the recipient from the initiating external account.\n//     data:contract.methods.negotiate(sell_Id,price,comment).encodeABI(), // Optional, but used for defining smart contract creation and interaction.\n//     chainId: 4, // Used to prevent transaction reuse across blockchains. Auto-filled by MetaMask.\n//   };\n\n//   const txHash = await window.ethereum.request({\n//     method: 'eth_sendTransaction',\n//     params: [transactionParameters],\n//   });\n// }\n\n\n\n// exports.buyCounterOrder = async(fromAccount, sell_Id)=>{\n// //  let price = 50;\n//    //price=new BigNumber(price)\n//   //price=new BigNumber(price).toString();\n//  // console.log(price)\n//   const transactionParameters = {\n//     nonce: '0x00', // ignored by MetaMask\n//     gasPrice: '0x09184e72a000', // customizable by user during MetaMask confirmation.\n//     gas: '0x2710', // customizable by user during MetaMask confirmation.\n//     to: constants.contract_address, // Required except during contract publications.\n//     from: fromAccount, // must match user's active address.\n//     value: '32', // Only required to send ether to the recipient from the initiating external account.\n//     data:contract.methods.buyCounterOrder(sell_Id).encodeABI(), // Optional, but used for defining smart contract creation and interaction.\n//     chainId: 4, // Used to prevent transaction reuse across blockchains. Auto-filled by MetaMask.\n//   };\n\n//   const txHash = await window.ethereum.request({\n//     method: 'eth_sendTransaction',\n//     params: [transactionParameters],\n//   });\n// }\n// exports.cancelOffer = async(fromAccount,counterId)=>{\n\n\n//   const transactionParameters = {\n//     nonce: '0x00', // ignored by MetaMask\n//     gasPrice: '0x09184e72a000', // customizable by user during MetaMask confirmation.\n//     gas: '0x2710', // customizable by user during MetaMask confirmation.\n//     to: constants.contract_address, // Required except during contract publications.\n//     from: fromAccount, // must match user's active address.\n//     value: '0x00', // Only required to send ether to the recipient from the initiating external account.\n//     data:contract.methods.cancelCounterOrder(counterId).encodeABI(), // Optional, but used for defining smart contract creation and interaction.\n//     chainId: 4, // Used to prevent transaction reuse across blockchains. Auto-filled by MetaMask.\n//   };\n\n//   const txHash = await window.ethereum.request({\n//     method: 'eth_sendTransaction',\n//     params: [transactionParameters],\n//   });\n\n// }\n\n// exports.increamentQuantity = async(fromAccount,sell_Id,quantity)=>{\n//   const maticPOSClient = new MaticPOSClient({\n//     network: \"testnet\",\n//     version: \"mumbai\",\n//     parentProvider: window.web3.currentProvider,\n//     maticProvider: 'https://rpc-mumbai.maticvigil.com/v1/d325690d7fb7c65dcad3b07fd8b0f0b5c5a18b71'\n//   });\n//   let rootToken = \"0xfe1b6ABc39E46cEc54d275efB4b29B33be176c2A\"\n//   await maticPOSClient.approveERC20ForDeposit(rootToken, web3.utils.toWei('100000000'),fromAccount );\n\n// }\n\n\n// exports.decreamentQuantity = async(fromAccount,sell_Id,quantity)=>{\n//   const transactionParameters = {\n//     nonce: '0x00', // ignored by MetaMask\n//     gasPrice: '0x09184e72a000', // customizable by user during MetaMask confirmation.\n//     gas: '0x2710', // customizable by user during MetaMask confirmation.\n//     to: constants.contract_address, // Required except during contract publications.\n//     from: fromAccount, // must match user's active address.\n//     value: '0x00', // Only required to send ether to the recipient from the initiating external account.\n//     data:contract.methods.decreamentQuantity(sell_Id,quantity).encodeABI(), // Optional, but used for defining smart contract creation and interaction.\n//     chainId: 4, // Used to prevent transaction reuse across blockchains. Auto-filled by MetaMask.\n//   };\n\n//   const txHash = await window.ethereum.request({\n//     method: 'eth_sendTransaction',\n//     params: [transactionParameters],\n//   });  \n// }\n\n// exports.getCurrentGasPrices = async () => {\n//   try {\n//       let response = await axios.get('https://ethgasstation.info/json/ethgasAPI.json')\n//       let prices = {\n//           low: response.data.safeLow / 10,\n//           medium: response.data.average / 10,\n//           high: response.data.fast / 10\n//       };\n//       console.log(prices)\n//       return prices;\n//   } catch (e) {\n//       console.log(e)\n//   }\n\n// };\n\n","/home/danial/Desktop/XORD_Scripts/Wallet-Connector/FYP_Project/src/utils/constants.js",[],{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","severity":1,"message":"53","line":1,"column":8,"nodeType":"54","messageId":"55","endLine":1,"endColumn":12},{"ruleId":"52","severity":1,"message":"56","line":4,"column":8,"nodeType":"54","messageId":"55","endLine":4,"endColumn":12},{"ruleId":"52","severity":1,"message":"57","line":1,"column":15,"nodeType":"54","messageId":"55","endLine":1,"endColumn":24},{"ruleId":"52","severity":1,"message":"58","line":13,"column":5,"nodeType":"54","messageId":"55","endLine":13,"endColumn":12},{"ruleId":"52","severity":1,"message":"59","line":14,"column":5,"nodeType":"54","messageId":"55","endLine":14,"endColumn":12},{"ruleId":"52","severity":1,"message":"60","line":15,"column":5,"nodeType":"54","messageId":"55","endLine":15,"endColumn":12},{"ruleId":"52","severity":1,"message":"61","line":17,"column":5,"nodeType":"54","messageId":"55","endLine":17,"endColumn":15},{"ruleId":"52","severity":1,"message":"62","line":18,"column":5,"nodeType":"54","messageId":"55","endLine":18,"endColumn":11},{"ruleId":"52","severity":1,"message":"63","line":19,"column":5,"nodeType":"54","messageId":"55","endLine":19,"endColumn":10},{"ruleId":"52","severity":1,"message":"64","line":43,"column":9,"nodeType":"54","messageId":"55","endLine":43,"endColumn":26},{"ruleId":"52","severity":1,"message":"65","line":50,"column":9,"nodeType":"54","messageId":"55","endLine":50,"endColumn":25},{"ruleId":"52","severity":1,"message":"66","line":2,"column":5,"nodeType":"54","messageId":"55","endLine":2,"endColumn":10},{"ruleId":"52","severity":1,"message":"67","line":3,"column":7,"nodeType":"54","messageId":"55","endLine":3,"endColumn":16},"no-native-reassign",["68"],"no-negated-in-lhs",["69"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'Web3' is defined but never used.","'useEffect' is defined but never used.","'library' is assigned a value but never used.","'chainId' is assigned a value but never used.","'account' is assigned a value but never used.","'deactivate' is assigned a value but never used.","'active' is assigned a value but never used.","'error' is assigned a value but never used.","'killWalletSession' is assigned a value but never used.","'deactivateWallet' is assigned a value but never used.","'axios' is assigned a value but never used.","'BigNumber' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]