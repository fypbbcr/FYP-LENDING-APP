// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Requests extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Requests entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Requests entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Requests", id.toString(), this);
  }

  static load(id: string): Requests | null {
    return store.get("Requests", id) as Requests | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get lender(): Bytes | null {
    let value = this.get("lender");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set lender(value: Bytes | null) {
    if (value === null) {
      this.unset("lender");
    } else {
      this.set("lender", Value.fromBytes(value as Bytes));
    }
  }

  get borrower(): Bytes {
    let value = this.get("borrower");
    return value.toBytes();
  }

  set borrower(value: Bytes) {
    this.set("borrower", Value.fromBytes(value));
  }

  get amount(): BigDecimal {
    let value = this.get("amount");
    return value.toBigDecimal();
  }

  set amount(value: BigDecimal) {
    this.set("amount", Value.fromBigDecimal(value));
  }

  get duration(): BigDecimal {
    let value = this.get("duration");
    return value.toBigDecimal();
  }

  set duration(value: BigDecimal) {
    this.set("duration", Value.fromBigDecimal(value));
  }

  get startingTime(): BigDecimal | null {
    let value = this.get("startingTime");
    if (value === null) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set startingTime(value: BigDecimal | null) {
    if (value === null) {
      this.unset("startingTime");
    } else {
      this.set("startingTime", Value.fromBigDecimal(value as BigDecimal));
    }
  }

  get status(): string {
    let value = this.get("status");
    return value.toString();
  }

  set status(value: string) {
    this.set("status", Value.fromString(value));
  }
}

export class Borrow extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Borrow entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Borrow entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Borrow", id.toString(), this);
  }

  static load(id: string): Borrow | null {
    return store.get("Borrow", id) as Borrow | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get lender(): Bytes | null {
    let value = this.get("lender");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set lender(value: Bytes | null) {
    if (value === null) {
      this.unset("lender");
    } else {
      this.set("lender", Value.fromBytes(value as Bytes));
    }
  }

  get borrower(): Bytes {
    let value = this.get("borrower");
    return value.toBytes();
  }

  set borrower(value: Bytes) {
    this.set("borrower", Value.fromBytes(value));
  }

  get amount(): BigDecimal {
    let value = this.get("amount");
    return value.toBigDecimal();
  }

  set amount(value: BigDecimal) {
    this.set("amount", Value.fromBigDecimal(value));
  }

  get duration(): BigDecimal {
    let value = this.get("duration");
    return value.toBigDecimal();
  }

  set duration(value: BigDecimal) {
    this.set("duration", Value.fromBigDecimal(value));
  }

  get startingTime(): BigDecimal | null {
    let value = this.get("startingTime");
    if (value === null) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set startingTime(value: BigDecimal | null) {
    if (value === null) {
      this.unset("startingTime");
    } else {
      this.set("startingTime", Value.fromBigDecimal(value as BigDecimal));
    }
  }

  get status(): string {
    let value = this.get("status");
    return value.toString();
  }

  set status(value: string) {
    this.set("status", Value.fromString(value));
  }
}
